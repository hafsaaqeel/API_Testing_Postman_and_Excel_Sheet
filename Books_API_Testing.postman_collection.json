{
	"info": {
		"_postman_id": "9c603334-92cc-4cfb-bbf0-47c867f4f4d2",
		"name": "Books_API_Testing",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26783953"
	},
	"item": [
		{
			"name": "01- Status_Check if the API is Up and Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"status"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "02- Neg_Try an invalid status endpoint",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/invalid-status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"invalid-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "03- Books_Retrieve all books without filters",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "04- Pos_Retrieve books with a type=fiction filter",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=fiction",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "05- Neg_Retrieve books with an invalid type filter",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?type=invalid",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "06- Neg_Retrieve books with a limit=30 (greater than 20)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books?limit=30",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "07- Book_Retrieve details of a valid book by bookId",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "08- Pos_Retrieve a book with a valid bookId=1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "09- Neg_Retrieve details for a non-existing bookId=9999",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "10- Neg_Retrieve details with an invalid bookId format",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/books/invalidsd",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"books",
						"invalidsd"
					]
				}
			},
			"response": []
		},
		{
			"name": "11- API_Client_Successfully register a new API client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"clientName\": \"Ms. Hafsa\", \r\n    \"clientEmail\": \"hafsa@example.com\" \r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api-clients/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "12- Neg_Register with an already used email",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"clientName\": \"Another Client\", \r\n    \"clientEmail\": \"hafsa@example.com\" \r\n    \r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api-clients/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "13- Neg_Try registering without clientName or clientEmail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"clientName\": \"\",\r\n    \"clientEmail\": \"\"\r\n    \r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api-clients/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "14- Successfully submit a valid order",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"bookId\": 1,  \r\n    \"customerName\": \"Ms. Hafsa\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "15- Pos_Submit an order with valid bookId=1 and customerName",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"bookId\": 1, \"customerName\": \"Ms. Hafsa\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "16- Neg_Submit an order with an invalid bookId=999",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"bookId\": 999, \"customerName\": \"Ms. Mari\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "17- Neg_Submit an order with invalid Bearer token",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e79643",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"bookId\": 1, \"customerName\": \"\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "18- Orders_Retrieve all orders of a user",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "19- Pos_Retrieve orders with valid authentication",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "20- Neg_Try to retrieve orders without authentication",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "21- Neg_Retrieve orders with an expired accessToken",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2ssa",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "22- Update_Order_Successfully update an order's customer name",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"customerName\": \"Frau Hafsa Aqeel\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/8GfkyZqVWMJE24ZdnGtbg",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"8GfkyZqVWMJE24ZdnGtbg"
					]
				}
			},
			"response": []
		},
		{
			"name": "23- Pos_Update customer name for an existing order  (orderId=G1aZkg8C_iAYjOHSATaR6)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"customerName\": \"Frau Aqeel, Hafsa\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/G1aZkg8C_iAYjOHSATaR6",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"G1aZkg8C_iAYjOHSATaR6"
					]
				}
			},
			"response": []
		},
		{
			"name": "24- Neg_Try updating an order that doesn't exist",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"customerName\": \"Frau Hafsa Aqeel\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/G1aZkg8C_iAYjOHSATaR3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"G1aZkg8C_iAYjOHSATaR3"
					]
				}
			},
			"response": []
		},
		{
			"name": "25 & 26- Positive & Negative_Successfully delete an existing order & then try deleting an order that doesn't exist",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "03f317afbbebae021c5e796436adec3c6f5501d20f351c8ee6dacdd08eb7a3f2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders/3TgTEXpBM5eX3-jSOa4ML",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"3TgTEXpBM5eX3-jSOa4ML"
					]
				}
			},
			"response": []
		},
		{
			"name": "27- Neg_Try deleting an order without authentication",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/G1aZkg8C_iAYjOHSATaR3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"G1aZkg8C_iAYjOHSATaR3"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://simple-books-api.glitch.me/"
		}
	]
}